//
// Automatically generated by
//     ____________ 
//    / __/_  __/ / 
//   / _/  / / / /__
//  /_/   /_/ /____/            
//
import { toQueryString } from "./utils";
{{- define "tstype" -}}
{{- $type := (. | typename ) -}}
{{- if eq $type "Array" }}{{ template "tstype" .Element }}[]
{{- else if eq $type "Map" }}Map<{{ template "tstype" .Key }}, {{ template "tstype" .Value }}>
{{- else if eq $type "DataRef" }}{{ . }}
{{- else if eq $type "Int" }}number
{{- else if eq $type "String" }}string
{{- else -}}{{ . | typename }}{{- end -}}
{{- end -}}

{{ range .Data }}
export interface {{ .Name | camel }} {
{{- range .Fields }}
  {{ .Name }}: {{ template "tstype" .Type }};
{{- end }}
}
{{ end}}

export class {{ .Name | camel }}Client {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

{{- range .Verbs }}
{{- $verb := . -}}
{{- range .Metadata }}
{{ if eq "MetadataIngress" (. | typename) }}
  public async {{ $verb.Name | lowerCamel }}(request: {{ $verb.Request }}): Promise<{{ $verb.Response }}> {
    {{ if eq .Method "GET" -}}
    
    const response = await fetch(`${this.baseUrl}{{ .Path }}?${toQueryString(request)}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    {{ else if eq .Method "POST" -}}
    const response = await fetch(`${this.baseUrl}{{ .Path }}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });
    {{- end -}}
    
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }

    return response.json();
  }
{{- end }}
{{- end }}
{{- end }}
}
